
                                    solidity code

pimport "./Operation3.sol";
pragma solidity ^0.4.0;
contract Test

{
 function totalSupply(uint256 _totalsupply)public returns(uint256);
 function Transfer(address to,uint256 transamount)public returns(uint256,uint256);
 function BalanceOf(address a)public constant returns(uint256);
 function Approve(address spender,uint256 spendersamount)public returns(string,uint256);
 function Allowance(address spender)public constant returns(uint256);
 function TransferFrom(address spender,address to,uint256 amount)public returns(uint256);
 }
contract Tokens is Test
{
    using Operations for uint256;
   
   mapping(address=>bool)status;
    mapping(address=>uint256)key_1;
    mapping(address=>mapping(address=>uint))key_2; 
    
    function totalSupply(uint256 _totalsupply)public returns(uint256)
    {
        require(status[msg.sender]==false);
        key_1[msg.sender]=_totalsupply;
        status[msg.sender]=true;
        return key_1[msg.sender];
    }
    function Transfer(address to,uint256 transamount)public returns(uint256,uint256)
    {
        require(transamount<=key_1[msg.sender]);
        key_1[msg.sender]=key_1[msg.sender].sub(transamount);
        key_1[to]=key_1[to].add(transamount);
        return (key_1[msg.sender],key_1[to]);
       
    }
    function BalanceOf(address a)public constant returns(uint256)
    {
         return key_1[a];
    }
    function Approve(address spender,uint256 spendersamount)public returns(string,uint256)
    {
        require(spendersamount<=key_1[msg.sender]);
        key_2[msg.sender][spender]+=key_2[msg.sender][spender].add(spendersamount);
        return ("Approved Amount",key_2[msg.sender][spender]);
    }
    function Allowance(address spender)public constant returns(uint256)
    {
        return key_2[msg.sender][spender];
    }
    function TransferFrom(address spender,address to,uint256 amount)public returns(uint256)
    {
        require(amount<=key_1[msg.sender]&&amount<=key_2[msg.sender][spender]);
        
        key_1[msg.sender]=key_1[msg.sender].sub(amount);
        key_2[msg.sender][spender]=key_2[msg.sender][spender].sub(amount);
        key_1[to]=key_1[to].add(amount);
        return key_2[msg.sender][spender];
    }
}

                                                   HTML code


<html>
 
<head>

<meta charset="utf-8">

<title>Test</title>

</head>

<body bgcolor="sky blue">

<h2  style="color:white"><center>Bank_Wallet</center></h2>
<div>
<h1 style="color:white">Total_Supply</h1>

<table >

<tr><input id="supply"  placeholder="Enter total supply" type="text" /></tr>

<tr><button id="ts_click" onclick="totalsupply();">Supply</button></tr>

</table>
</div>



<div>

<h1 style="color:white">Transfer<h1>

<table>

<tr>
<input id="to_address" placeholder="Enter to address" type="text" /></tr>

<tr><input id="trans_amount"placeholder="Enter amount to transfer" type="text" /></tr>

<tr><button id="t_click" onclick="transfer();">Transfer</button></tr>

</table>

</div>



<div>

<h1 style="color:white">Balance</h1>

<table>

<tr><input id="address" placeholder="Enter address" type="text" /></tr>

<tr><button id="b_click" onclick="balance();">Balance</button></tr>

</table>

</div>



<div>
<h1 style="color:white">Approve</h1>

<table>

<tr><input id="spenderaddress" placeholder="Enter spender address"  type="text" />

</tr>
<tr><input id="spenderamount" placeholder="Enter amount" type="text" />
</tr>

<tr><button id="w_click" onclick="approve();">Approve</button>

</div>



<div>
<h1 style="color:white">Allowance</h1>
</tr>

<table>

<tr><input id="spender_address" placeholder="Enter spender address"  type="text" /></tr>

<tr><button id="o_click" onclick="allowance();">Allowance</button></tr>

</table>

</div>



<div>

<h1 style="color:white">Transfer_From</h1>

<table>

<tr><input id="spender_address" placeholder="Enter from address"  type="text" />
</tr>
<tr><input id="to_address" placeholder="Enter to address" type="text" />
</tr>
<tr><input id="amount" placeholder="Enter amount to transfer" type="text" /></tr>
<tr><button id="w_click" onclick="transfer_from();">Transfer</button></tr>
</div>


</body>

<script>
 
     web3.eth.defaultAccount = web3.eth.accounts[0];
     var sybexcon = web3.eth.contract([
	{
		"constant": true,
		"inputs": [
			{
				"name": "a",
				"type": "address"
			}
		],
		"name": "BalanceOf",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "spender",
				"type": "address"
			}
		],
		"name": "Allowance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "spender",
				"type": "address"
			},
			{
				"name": "spendersamount",
				"type": "uint256"
			}
		],
		"name": "Approve",
		"outputs": [
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "to",
				"type": "address"
			},
			{
				"name": "transamount",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "spender",
				"type": "address"
			},
			{
				"name": "to",
				"type": "address"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "TransferFrom",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_totalsupply",
				"type": "uint256"
			}
		],
		"name": "totalSupply",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
]);

        var sybex = sybexcon.at('0x7e1031b1ba537410ed8a9c8b804ba29b3d80bd99');

 
    if(web3.isConnected()) 
 
      {
  
      
	 console.log("Ok");
  
       }
     
else
 
    {
 
	   console.log("no");

      }

      web3.version.getNetwork((err, netId) => {

            switch (netId)
 {
 
    case "1":
  console.log('This is mainnet')
 
	   break

   case "2":
  console.log('This is the deprecated Morden test network.')
  
	   break
 
   case "3":
  console.log('This is the ropsten test network.')
        
	   break
  
   case "4":  console.log('This is the Rinkeby test network.')

                   break
  
   case "42":
 console.log('This is the Kovan test network.')
   
                   break

   default:
  console.log('This is an unknown network.')
         
  }

        });



function totalsupply()

 { 	
var sup=document.getElementById('supply');
	return sybex.totalSupply(sup.value,function(error,result)

{

   if(!error) 
    
	{

       	   alert("Successful:"+result); 
   

    	}

	else
	   {

  	  alert("ERROR");
   
	 }

}
);
}



function transfer() 

{

var toadd=document.getElementById('to_address');

var amt=document.getElementById('trans_amount');

return sybex.Transfer(toadd.value,amt.value,function(error,result)

{
  
  if(!error) 

  	{
          	alert(result); 
   	}
	 else
  
	 {

	 alert("ERROR");
   
	 }

}
);
}



function balance()

{

var add=document.getElementById('address');

return sybex.BalanceOf(add.value,function(error,result)
  
{

 if(!error) 
 
   {
 	 alert(result); 

    }
    else
    {

	  alert("ERROR");
   
    }

    }
);

}



function approve()

{

var spenadd=document.getElementById('spenderaddress');

var spenamount=document.getElementById('spenderamount');

return sybex.Approve(spenadd.value,spenamount.value,function(error,result)

{
    
  if(!error)
	{

                    alert(result);
	 }

    	else

    	{

	        alert("ERROR");
    
	}

}
);

}



function allowance()

{

var spenadd=document.getElementById('spender_address');

return sybex.Allowance(spenadd.value,function(error,result)

{

  if(!error) 

    	{
	 alert(result);
  	 }

	else

	{

    	alert("ERROR");
   
 	}

}
);

}




function transfer_from()

{

var spenadd=document.getElementById('spender_address');

var toadd=document.getElementById('to_address');

var amt=document.getElementById('amount');

return sybex.TransferFrom(spenadd.value,toadd.value,amt.value,function(error,result)

{

  if(!error)
   	{
    	 alert("Successful:"+result);
   	 }
     	else

   	 {
	
    alert("ERROR");
  
	  }

}
);

}

</script>

</html>
